//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                                                                              //
//  Author: meisq                                                               //
//          msq@qq.com                                                          //
//          ALINX(shanghai) Technology Co.,Ltd                                  //
//          heijin                                                              //
//     WEB: http://www.alinx.cn/                                                //
//     BBS: http://www.heijin.org/                                              //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// Copyright (c) 2017,ALINX(shanghai) Technology Co.,Ltd                        //
//                    All rights reserved                                       //
//                                                                              //
// This source file may be used and distributed without restriction provided    //
// that this copyright statement is not removed from the file and that any      //
// derivative work contains the original copyright notice and the associated    //
// disclaimer.                                                                  //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

//================================================================================
//  Revision History:
//  Date          By            Revision    Change Description
//--------------------------------------------------------------------------------
//  2017/7/19     meisq          1.0         Original
//*******************************************************************************/

module i2c_config(
	input              rst,
	input              clk,
	input[15:0]        clk_div_cnt,
	input              i2c_addr_2byte,
	output reg[9:0]    lut_index,
	input[7:0]         lut_dev_addr,
	input[15:0]        lut_reg_addr,
	input[7:0]         lut_reg_data,
	output reg         error,
	output reg         done,
	inout              i2c_scl,
	inout              i2c_sda
);
wire scl_pad_i;
wire scl_pad_o;
wire scl_padoen_o;

wire sda_pad_i;
wire sda_pad_o;
wire sda_padoen_o;

assign sda_pad_i = i2c_sda;
assign i2c_sda = ~sda_padoen_o ? sda_pad_o : 1'bz;
assign scl_pad_i = i2c_scl;
assign i2c_scl = ~scl_padoen_o ? scl_pad_o : 1'bz;

reg i2c_read_req;
wire i2c_read_req_ack;
reg i2c_write_req;
wire i2c_write_req_ack;
wire[7:0] i2c_slave_dev_addr;
wire[15:0] i2c_slave_reg_addr;
wire[7:0] i2c_write_data;
wire[7:0] i2c_read_data;

wire err;
reg[2:0] state;

reg clock_i2c;
reg [15:0] clock_cnt;

//generate i2c clock  
always@(posedge clk)   
begin
   if(rst) begin
        clock_i2c<=0;
        clock_cnt<=0;
   end
   else 
	   if(clock_cnt < clk_div_cnt)
          clock_cnt <= clock_cnt + 1'b1;
      else begin
         clock_i2c <= ~clock_i2c;
         clock_cnt <= 0;
      end
end


////iic    
always@(posedge clock_i2c)    
begin
   if(rst) begin
       state <= 0;
       start <= 0;
       lut_index<=0;
		 done<=0;
   end
   else begin
      if(done==1'b0) begin          //camera initial not finish
			  if(lut_index <302) begin
					 case(state)
					 0:begin
						i2c_data <= {lut_dev_addr,lut_reg_addr,lut_reg_data};  
						start <= 1'b1;
						state <= 1;
					 end
					 1:begin
						if(tr_end) begin                       //IIC发送结束               					
							 start <= 1'b0;
							 state <= 2;
						end
					 end
					 2:begin
						  lut_index <= lut_index + 1'b1;
						  state <= 0;
					 end
					 endcase
				end
			 else 
				done <= 1'b1;
      end
   end
 end
 
//iic comminication
i2c_com u1(
     .clock_i2c       (clock_i2c       ),
     .camera_rstn     (rst             ),
     .ack             (ack             ),
     .i2c_data        (i2c_data        ),
     .start           (start           ),
     .tr_end          (tr_end          ),
     .i2c_sclk        (i2c_sclk        ),
     .i2c_sdat        (i2c_sdat        )
);
 
endmodule
